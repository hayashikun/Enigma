{"version":3,"sources":["component/Rotor.tsx","model/Enigma.ts","component/Rotors.tsx","component/Encoder.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Rotor","state","rotorPosition","canvases","dp","_this2","this","setState","props","numberOfChars","drawRotor","update","arguments","length","undefined","contexts","map","c","getContext","clearRect","width","height","radius","Math","min","center","pinRadius","beginPath","fillStyle","arc","PI","fill","strokeStyle","textAlign","textBaseline","font","floor","fillText","name","i","angle","pinCenter","sin","cos","stroke","chars","_this3","react_default","a","createElement","className","onClick","rotate","style","position","margin","ref","e","top","left","React","Component","AlphabetEnigma","_Enigma","rotorPositions","reflectorConfiguration","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","alphabet","inherits","createClass","key","value","str","Array","from","_","k","charAt","toUpperCase","filter","s","indexOf","encryptChars","join","Enigma","currentPosition","Error","char","_this","forEach","pos","idx","rotorPos","max","find","includes","p","reverse","rev_idx","encryptChar","Rotors","inputChar","outputChar","input","display","justifyContent","Rotor_Rotor","id","inputButtonSelected","Encoder","plain","encoded","encoderConfiguration","enigma","replace","resetPosition","encodedStr","encryptAlphabetString","conf","encode","htmlFor","onChange","updateEncoderConfiguration","target","App","component_Encoder","Rotors_Rotors","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.068dc259.chunk.js","sourcesContent":["import React from 'react';\n\n\ninterface RotorProps {\n    numberOfChars: number;\n    chars: string[];\n    width: number;\n    height: number;\n    name: string;\n}\n\nexport default class Rotor extends React.Component<RotorProps> {\n    state = {\n        rotorPosition: 0\n    };\n    canvases: HTMLCanvasElement[] = [];\n\n    rotate(dp: number) {\n        this.setState({\n            rotorPosition: (this.state.rotorPosition + dp + this.props.numberOfChars) % this.props.numberOfChars\n        }, () => this.drawRotor());\n    }\n\n    componentDidMount() {\n        this.drawRotor(false);\n    }\n\n\n    drawRotor(update = true) {\n        const contexts = this.canvases.map(c => c.getContext(\"2d\")!);\n\n        if (update) {\n            contexts[1].clearRect(0, 0, this.props.width, this.props.height);\n        }\n\n        const radius = Math.min(this.props.width, this.props.height) / 2;\n        const center = [this.props.width / 2, this.props.height / 2];\n        const pinRadius = radius / 12;\n\n        if (!update) {\n            contexts[0].beginPath();\n            contexts[0].fillStyle = \"lightgray\";\n            contexts[0].arc(center[0], center[1], radius, 0, Math.PI * 2);\n            contexts[0].fill();\n            contexts[0].strokeStyle = \"gray\";\n            contexts[0].textAlign = \"center\";\n            contexts[0].textBaseline = \"middle\";\n            contexts[0].fillStyle = \"black\";\n            contexts[0].font = \"normal \" + Math.floor(radius / 3) + \"pt sans-serif\";\n            contexts[0].fillText(this.props.name, center[0], center[1]);\n\n        }\n\n        contexts[1].textAlign = \"center\";\n        contexts[1].textBaseline = \"middle\";\n\n        for (let i = 0; i < this.props.numberOfChars; ++i) {\n            const angle = Math.PI - (i - this.state.rotorPosition) * 2 * Math.PI / this.props.numberOfChars;\n            const pinCenter = [\n                center[0] + (radius - pinRadius * 1.3) * Math.sin(angle),\n                center[1] + (radius - pinRadius * 1.3) * Math.cos(angle)\n            ];\n            if (!update) {\n                contexts[0].beginPath();\n                contexts[0].arc(pinCenter[0], pinCenter[1],\n                    pinRadius, 0, Math.PI * 2);\n                contexts[0].stroke();\n            }\n\n            contexts[1].beginPath();\n            contexts[1].fillStyle = \"black\";\n            contexts[1].font = \"normal \" + Math.floor(pinRadius) + \"pt sans-serif\";\n            contexts[1].fillText(this.props.chars[i], pinCenter[0], pinCenter[1]);\n        }\n\n    }\n\n    render() {\n        return (\n            <div className=\"rotor\">\n                <div>{this.state.rotorPosition}</div>\n                <button onClick={() => this.rotate(+1)}>+1</button>\n                <button onClick={() => this.rotate(-1)}>-1</button>\n\n                <div style={{\n                    position: \"relative\",\n                    width: this.props.width,\n                    height: this.props.height,\n                    margin: \"20px auto\"\n                }}>\n                    <canvas ref={e => this.canvases[0] = e!}\n                            width={this.props.width}\n                            height={this.props.height}\n                            style={{\n                                position: \"absolute\",\n                                top: 0,\n                                left: 0\n                            }}\n                    />\n                    <canvas ref={e => this.canvases[1] = e!}\n                            width={this.props.width}\n                            height={this.props.height}\n                            style={{\n                                position: \"absolute\",\n                                top: 0,\n                                left: 0\n                            }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n}","type Char = number;\n\nexport class Enigma {\n    rotorPositions: Char[];\n    currentPosition = 0;\n    reflectorConfiguration: Char[][];\n    numberOfChars: number;\n\n    constructor(rotorPositions: Char[], reflectorConfiguration: Char[][], numberOfChars: number) {\n        if (reflectorConfiguration.length !== numberOfChars && numberOfChars % 2 !== 0) {\n            throw Error();\n        }\n        this.rotorPositions = rotorPositions;\n        this.reflectorConfiguration = reflectorConfiguration;\n        this.numberOfChars = numberOfChars;\n    }\n\n    resetPosition(rotorPositions: Char[] | null) {\n        if (rotorPositions) {\n            if (this.rotorPositions.length !== rotorPositions.length) {\n                throw Error();\n            }\n            this.rotorPositions = rotorPositions;\n        }\n        this.currentPosition = 0;\n    }\n\n    encryptChar(char: Char): Char {\n        this.rotorPositions.forEach((pos, idx) => {\n            let rotorPos = pos + Math.floor(this.currentPosition / Math.max(this.numberOfChars * idx, 1));\n            char = char + rotorPos\n        });\n        char = char % this.numberOfChars;\n\n        char = this.reflectorConfiguration.find(s => s.includes(char))!.find(p => p !== char)!;\n        this.rotorPositions.reverse().forEach((pos, rev_idx) => {\n            let idx = this.rotorPositions.length - rev_idx - 1;\n            let rotorPos = pos + Math.floor(this.currentPosition / Math.max(this.numberOfChars * idx, 1));\n            char = char - rotorPos + this.numberOfChars;\n        });\n        char = char % this.numberOfChars;\n\n        this.currentPosition++;\n        return char;\n    }\n\n    encryptChars(chars: Char[]): Char[] {\n        return chars.map(c => this.encryptChar(c))\n    }\n}\n\nexport class AlphabetEnigma extends Enigma {\n    static readonly alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ_?\";\n\n    constructor(rotorPositions: Char[], reflectorConfiguration: Char[][]) {\n        super(rotorPositions, reflectorConfiguration, AlphabetEnigma.alphabet.length)\n    }\n\n    encryptAlphabetString(str: string): string {\n        let str_array = Array.from({length: str.length}, (_, k) => str.charAt(k).toUpperCase());\n        let chars = str_array\n            .filter(s => AlphabetEnigma.alphabet.indexOf(s) >= 0)\n            .map(s => AlphabetEnigma.alphabet.indexOf(s));\n        chars = this.encryptChars(chars);\n        return chars.map(c => AlphabetEnigma.alphabet.charAt(c)).join(\"\");\n    }\n}\n","import React from 'react';\nimport Rotor from \"./Rotor\"\nimport {AlphabetEnigma} from \"../model/Enigma\";\n\n\nexport default class Rotors extends React.Component {\n    state = {\n        inputChar: null,\n        outputChar: null\n    };\n\n    chars = Array.from({length: AlphabetEnigma.alphabet.length},\n        (_, k) => AlphabetEnigma.alphabet.charAt(k));\n\n\n    inputButtonSelected(char: string) {\n        this.setState({input: char})\n    }\n\n    render() {\n        return (\n             <div className=\"Rotors\">\n                    <h2>Rotors</h2>\n                    <div style={{\n                        display: \"flex\",\n                        justifyContent: \"center\"\n                    }}>\n                        <Rotor numberOfChars={AlphabetEnigma.alphabet.length}\n                               chars={this.chars}\n                               width={400} height={400}\n                               name={\"R1\"}\n                        />\n                        <Rotor numberOfChars={AlphabetEnigma.alphabet.length}\n                               chars={this.chars}\n                               width={400} height={400}\n                               name={\"R2\"}\n                        />\n                        <Rotor numberOfChars={AlphabetEnigma.alphabet.length}\n                               chars={this.chars}\n                               width={400} height={400}\n                               name={\"R3\"}\n                        />\n                    </div>\n                    <div>\n                        {this.chars.map(c => <button key={\"input-button-\" + c} id={\"input-button-\" + c}\n                                                     onClick={() => this.inputButtonSelected(c)}>{c}</button>)}\n                    </div>\n                    <div>\n                        Input: {this.state.inputChar}\n                    </div>\n                    <div>\n                        Output: {this.state.outputChar}\n                    </div>\n                </div>\n        );\n    }\n}\n","import React from 'react';\nimport {AlphabetEnigma} from \"../model/Enigma\";\n\nclass Encoder extends React.Component {\n    state = {\n        plain: \"\",\n        encoded: \"\",\n        encoderConfiguration: [\"A\", \"A\", \"A\"],\n    };\n\n    enigma = new AlphabetEnigma([0, 0, 0],\n        Array.from({length: AlphabetEnigma.alphabet.length / 2},\n            (_, k) => k).map(i => [i, AlphabetEnigma.alphabet.length - 1 - i]));\n\n    chars = Array.from({length: AlphabetEnigma.alphabet.length},\n        (_, k) => AlphabetEnigma.alphabet.charAt(k));\n\n\n    encode(str: string) {\n        str = str.replace(\" \", \"_\");\n        str = Array.from({length: str.length},\n            (_, k) => str.charAt(k).toUpperCase()).filter(s => this.chars.indexOf(s) >= 0).join(\"\");\n        this.setState({plain: str});\n        this.enigma.resetPosition(this.state.encoderConfiguration.map(c => this.chars.indexOf(c)));\n        const encodedStr = this.enigma.encryptAlphabetString(str);\n        this.setState({encoded: encodedStr})\n    }\n\n    updateEncoderConfiguration(idx: number, char: string) {\n        let conf = this.state.encoderConfiguration;\n        if (char.length >= 2) {\n            char = char.charAt(1)\n        }\n        char = char.toUpperCase();\n        if (this.chars.indexOf(char) >= 0) {\n            conf[idx] = char;\n        }\n        this.setState({encoderConfiguration: conf});\n        this.encode(this.state.plain);\n    }\n\n    render() {\n        return (\n            <div className=\"Encoder\">\n                <h2>Encoder</h2>\n                <div>\n                    <div className={\"encoder-configurations\"}>\n                        <div className={\"encoder-configurations-title\"}>Configurations:</div>\n                        <div>\n                            <label htmlFor={\"R1-Configuration\"}>R1:</label>\n                            <input id={\"R1-Configuration\"} value={this.state.encoderConfiguration[0]}\n                                   onChange={e => this.updateEncoderConfiguration(0, e.target.value)}/>\n                            <label htmlFor={\"R2-Configuration\"}>R2:</label>\n                            <input id={\"R2-Configuration\"} value={this.state.encoderConfiguration[1]}\n                                   onChange={e => this.updateEncoderConfiguration(1, e.target.value)}/>\n                            <label htmlFor={\"R3-Configuration\"}>R3:</label>\n                            <input id={\"R3-Configuration\"} value={this.state.encoderConfiguration[2]}\n                                   onChange={e => this.updateEncoderConfiguration(2, e.target.value)}/>\n                        </div>\n\n                    </div>\n                    <div>\n                        <div className={\"encoder-input\"}>\n                            <label htmlFor={\"PlainInput\"}>Plain Text:</label>\n                            <input id={\"PlainInput\"} value={this.state.plain}\n                                   onChange={e => this.encode(e.target.value)}/>\n                        </div>\n                        <div className={\"encoder-output\"}>\n                            Output: <span className={\"encoder-output-text\"}>{this.state.encoded}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Encoder;\n","import React from 'react';\nimport './App.css';\nimport Rotors from \"./component/Rotors\"\nimport Encoder from \"./component/Encoder\"\n\nconst App: React.FC = () => (\n    <div className=\"App\">\n        <h1>Enigma</h1>\n        <Encoder/>\n        <hr/>\n        <Rotors/>\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
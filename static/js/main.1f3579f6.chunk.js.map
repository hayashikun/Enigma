{"version":3,"sources":["component/Rotor.tsx","component/Reflector.tsx","model/Enigma.ts","component/Rotors.tsx","component/Encoder.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Rotor","state","rotorPosition","canvases","radius","Math","min","_this","props","width","height","center","pinRadius","dp","_this2","this","setState","numberOfChars","drawRotor","onRotorUpdate","update","arguments","length","undefined","contexts","map","c","getContext","clearRect","textAlign","textBaseline","beginPath","fillStyle","arc","PI","fill","strokeStyle","font","floor","fillText","name","i","angle","outerTextCenter","sin","cos","outerPinCenter","middleTextCenter","innerPinCenter","stroke","chars","save","translate","rotate","middleText","rotorConfiguration","indexOf","restore","go","goNext","back","backBefore","highlightOuterText","context","goAngle","outerGoPinCenter","goNextAngle","innerGoAngle","backAngle","outerBackPinCenter","backBeforeAngle","innerBackPinCenter","lineWidth","outerTextGoCenter","outerTextBackCenter","_this3","react_default","a","createElement","className","onClick","style","position","ref","e","top","left","zIndex","React","Component","Reflector","drawReflector","reflectedAngle","reflectorConfiguration","pinCenter","startPinCenter","endPinCenter","moveTo","lineTo","margin","AlphabetEnigma","_Enigma","rotorPositions","AlphabetEnigmaRotorConfiguration1","AlphabetEnigmaRotorConfiguration2","AlphabetEnigmaRotorConfiguration3","AlphabetEnigmaReflectorConfigurationA","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","alphabet","inherits","createClass","key","value","str","Array","from","_","k","charAt","toUpperCase","filter","s","encryptChars","join","Enigma","currentPosition","Error","char","rotateIndex","idx","forEach","pos","rotorPos","max","reverse","rev_idx","encryptChar","Rotors","inputChar","outputChar","size","rotors","inputButtons","reflector","rotorConfigurations","inputButtonSelected","goPos1","nextChar1","nextPos1","goPos2","nextChar2","nextPos2","goPos3","next3","nextPos3","beforePos3","before3","back3","beforePos2","before2","back2","beforePos1","before1","back1","drawHighlight","classList","add","display","justifyContent","Rotor_Rotor","Reflector_Reflector","Encoder","plain","encoded","encoderConfiguration","enigma","resetPosition","encodedStr","encryptAlphabetString","conf","encode","htmlFor","id","onChange","updateEncoderConfiguration","target","App","component_Encoder","Rotors_Rotors","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f3579f6.chunk.js","sourcesContent":["import React from 'react';\n\n\ninterface RotorProps {\n    numberOfChars: number;\n    chars: string[];\n    rotorConfiguration: string[];\n    onRotorUpdate: () => void;\n    width: number;\n    height: number;\n    name: string;\n}\n\nexport default class Rotor extends React.Component<RotorProps> {\n    state = {\n        rotorPosition: 0\n    };\n    canvases: HTMLCanvasElement[] = [];\n    radius = Math.min(this.props.width, this.props.height) / 2.4;\n    center = [this.props.width / 2, this.props.height / 2];\n    pinRadius = this.radius / 16;\n\n\n    rotate(dp: number) {\n        this.setState({\n            rotorPosition: (this.state.rotorPosition + dp + this.props.numberOfChars) % this.props.numberOfChars\n        }, () => {\n            this.drawRotor();\n            this.props.onRotorUpdate();\n        });\n    }\n\n    componentDidMount() {\n        this.drawRotor(false);\n    }\n\n    drawRotor(update = true) {\n        const contexts = this.canvases.map(c => c.getContext(\"2d\")!);\n\n        if (update) {\n            contexts[1].clearRect(0, 0, this.props.width, this.props.height);\n        }\n\n        if (!update) {\n            contexts[0].textAlign = \"center\";\n            contexts[0].textBaseline = \"middle\";\n            contexts[0].beginPath();\n            contexts[0].fillStyle = \"lightgray\";\n            contexts[0].arc(this.center[0], this.center[1], this.radius, 0, Math.PI * 2);\n            contexts[0].fill();\n            contexts[0].strokeStyle = \"gray\";\n            contexts[0].fillStyle = \"black\";\n            contexts[0].font = \"normal \" + Math.floor(this.radius / 3) + \"pt sans-serif\";\n            contexts[0].fillText(this.props.name, this.center[0], this.center[1]);\n        }\n\n        contexts[1].textAlign = \"center\";\n        contexts[1].textBaseline = \"middle\";\n\n        for (let i = 0; i < this.props.numberOfChars; ++i) {\n            const angle = Math.PI - (i - this.state.rotorPosition) * 2 * Math.PI / this.props.numberOfChars;\n            const outerTextCenter = [\n                this.center[0] + (this.radius + this.pinRadius * 0.8) * Math.sin(angle),\n                this.center[1] + (this.radius + this.pinRadius * 0.8) * Math.cos(angle)\n            ];\n            const outerPinCenter = [\n                this.center[0] + (this.radius - this.pinRadius * 1.5) * Math.sin(angle),\n                this.center[1] + (this.radius - this.pinRadius * 1.5) * Math.cos(angle)\n            ];\n            const middleTextCenter = [\n                this.center[0] + (this.radius - this.pinRadius * 3.6) * Math.sin(angle),\n                this.center[1] + (this.radius - this.pinRadius * 3.6) * Math.cos(angle)\n            ];\n            const innerPinCenter = [\n                this.center[0] + (this.radius - this.pinRadius * 5.4) * Math.sin(angle),\n                this.center[1] + (this.radius - this.pinRadius * 5.4) * Math.cos(angle)\n            ];\n\n            if (!update) {\n                contexts[0].beginPath();\n                contexts[0].arc(outerPinCenter[0], outerPinCenter[1],\n                    this.pinRadius, 0, Math.PI * 2);\n                contexts[0].stroke();\n\n                contexts[0].beginPath();\n                contexts[0].arc(innerPinCenter[0], innerPinCenter[1],\n                    this.pinRadius, 0, Math.PI * 2);\n                contexts[0].stroke();\n\n                contexts[0].beginPath();\n                contexts[0].font = \"normal \" + Math.floor(this.pinRadius) + \"pt sans-serif\";\n                contexts[0].fillText(this.props.chars[i], outerTextCenter[0], outerTextCenter[1]);\n            }\n\n            contexts[1].textAlign = \"center\";\n            contexts[1].textBaseline = \"middle\";\n            contexts[1].font = \"normal \" + Math.floor(this.pinRadius) + \"pt sans-serif\";\n            contexts[1].fillStyle = \"black\";\n\n            contexts[1].beginPath();\n            contexts[1].fillText(this.props.chars[i], outerPinCenter[0], outerPinCenter[1]);\n\n            contexts[1].beginPath();\n            contexts[1].fillText(this.props.chars[i], innerPinCenter[0], innerPinCenter[1]);\n\n            contexts[1].font = \"normal \" + Math.floor(this.pinRadius * 0.6) + \"pt sans-serif\";\n\n            contexts[1].save();\n            contexts[1].beginPath();\n            contexts[1].translate(middleTextCenter[0], middleTextCenter[1]);\n            contexts[1].rotate(Math.PI - angle);\n            const middleText = \"↓\" + this.props.rotorConfiguration[i] + \" \" + this.props.chars[this.props.rotorConfiguration.indexOf(this.props.chars[i])] + \"↑\";\n            contexts[1].fillText(middleText, 0, 0);\n            contexts[1].restore();\n        }\n    }\n\n    drawHighlight(go: number, goNext: number, back: number, backBefore: number, highlightOuterText = false) {\n        const context = this.canvases[2].getContext(\"2d\")!;\n\n        context.clearRect(0, 0, this.props.width, this.props.height);\n\n        const goAngle = Math.PI - go * 2 * Math.PI / this.props.numberOfChars;\n        const outerGoPinCenter = [\n            this.center[0] + (this.radius - this.pinRadius * 1.5) * Math.sin(goAngle),\n            this.center[1] + (this.radius - this.pinRadius * 1.5) * Math.cos(goAngle)\n        ];\n        const goNextAngle = Math.PI - goNext * 2 * Math.PI / this.props.numberOfChars;\n        const innerGoAngle = [\n            this.center[0] + (this.radius - this.pinRadius * 5.4) * Math.sin(goNextAngle),\n            this.center[1] + (this.radius - this.pinRadius * 5.4) * Math.cos(goNextAngle)\n        ];\n\n        const backAngle = Math.PI - back * 2 * Math.PI / this.props.numberOfChars;\n        const outerBackPinCenter = [\n            this.center[0] + (this.radius - this.pinRadius * 1.5) * Math.sin(backAngle),\n            this.center[1] + (this.radius - this.pinRadius * 1.5) * Math.cos(backAngle)\n        ];\n        const backBeforeAngle = Math.PI - backBefore * 2 * Math.PI / this.props.numberOfChars;\n        const innerBackPinCenter = [\n            this.center[0] + (this.radius - this.pinRadius * 5.4) * Math.sin(backBeforeAngle),\n            this.center[1] + (this.radius - this.pinRadius * 5.4) * Math.cos(backBeforeAngle)\n        ];\n\n        context.fillStyle = \"rgba(255, 0, 0, 0.5)\";\n        context.beginPath();\n        context.arc(outerGoPinCenter[0], outerGoPinCenter[1], this.pinRadius, 0, Math.PI * 2);\n        context.fill();\n\n        context.beginPath();\n        context.arc(innerGoAngle[0], innerGoAngle[1], this.pinRadius, 0, Math.PI * 2);\n        context.fill();\n\n        context.fillStyle = \"rgba(0, 255, 0, 0.5)\";\n        context.beginPath();\n        context.arc(outerBackPinCenter[0], outerBackPinCenter[1], this.pinRadius, 0, Math.PI * 2);\n        context.fill();\n\n        context.beginPath();\n        context.arc(innerBackPinCenter[0], innerBackPinCenter[1], this.pinRadius, 0, Math.PI * 2);\n        context.fill();\n\n        if (highlightOuterText) {\n            context.lineWidth = 3;\n\n            const outerTextGoCenter = [\n                this.center[0] + (this.radius + this.pinRadius * 0.8) * Math.sin(goAngle),\n                this.center[1] + (this.radius + this.pinRadius * 0.8) * Math.cos(goAngle)\n            ];\n            context.strokeStyle = \"rgba(255, 0, 0, 1)\";\n            context.beginPath();\n            context.arc(outerTextGoCenter[0], outerTextGoCenter[1], this.pinRadius, 0, Math.PI * 2);\n            context.stroke();\n\n            const outerTextBackCenter = [\n                this.center[0] + (this.radius + this.pinRadius * 0.8) * Math.sin(backAngle),\n                this.center[1] + (this.radius + this.pinRadius * 0.8) * Math.cos(backAngle)\n            ];\n            context.strokeStyle = \"rgba(0, 255, 0, 1)\";\n\n            context.beginPath();\n            context.arc(outerTextBackCenter[0], outerTextBackCenter[1], this.pinRadius, 0, Math.PI * 2);\n            context.stroke();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"rotor\">\n                <div className={\"rotor-position\"}>{this.props.chars[this.state.rotorPosition]} ({this.state.rotorPosition})</div>\n                <button className={\"rotor-rotate-button\"} onClick={() => this.rotate(+1)}>+</button>\n                <button className={\"rotor-rotate-button\"} onClick={() => this.rotate(-1)}>-</button>\n\n                <div style={{\n                    position: \"relative\",\n                    width: this.props.width,\n                    height: this.props.height,\n                }}>\n                    <canvas ref={e => this.canvases[0] = e!}\n                            width={this.props.width}\n                            height={this.props.height}\n                            style={{\n                                position: \"absolute\",\n                                top: 0,\n                                left: 0,\n                                zIndex: 0\n                            }}\n                    />\n                    <canvas ref={e => this.canvases[1] = e!}\n                            width={this.props.width}\n                            height={this.props.height}\n                            style={{\n                                position: \"absolute\",\n                                top: 0,\n                                left: 0,\n                                zIndex: 2\n                            }}\n                    />\n                    <canvas ref={e => this.canvases[2] = e!}\n                            width={this.props.width}\n                            height={this.props.height}\n                            style={{\n                                position: \"absolute\",\n                                top: 0,\n                                left: 0,\n                                zIndex: 1\n                            }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\n\n\ninterface ReflectorProps {\n    numberOfChars: number,\n    chars: string[],\n    reflectorConfiguration: string[],\n    width: number;\n    height: number;\n}\n\nexport default class Reflector extends React.Component<ReflectorProps> {\n    canvases: HTMLCanvasElement[] = [];\n    radius = Math.min(this.props.width, this.props.height) / 2;\n    center = [this.props.width / 2, this.props.height / 2];\n    pinRadius = this.radius / 12;\n\n    componentDidMount() {\n        this.drawReflector();\n    }\n\n    drawReflector() {\n        const contexts = this.canvases.map(c => c.getContext(\"2d\")!);\n\n        contexts[0].textAlign = \"center\";\n        contexts[0].textBaseline = \"middle\";\n\n        contexts[0].beginPath();\n        contexts[0].fillStyle = \"lightgray\";\n        contexts[0].arc(this.center[0], this.center[1], this.radius, 0, Math.PI * 2);\n        contexts[0].fill();\n\n        contexts[0].font = \"normal \" + Math.floor(this.pinRadius) + \"pt sans-serif\";\n        contexts[0].fillStyle = \"black\";\n\n        for (let i = 0; i < this.props.numberOfChars; ++i) {\n            const angle = Math.PI - i * 2 * Math.PI / this.props.numberOfChars;\n            const reflectedAngle = Math.PI - this.props.chars.indexOf(this.props.reflectorConfiguration[i]) * 2 * Math.PI / this.props.numberOfChars;\n            const pinCenter = [\n                this.center[0] + (this.radius - this.pinRadius * 1.2) * Math.sin(angle),\n                this.center[1] + (this.radius - this.pinRadius * 1.2) * Math.cos(angle)\n            ];\n\n            const startPinCenter = [\n                this.center[0] + (this.radius - this.pinRadius * 2.2) * Math.sin(angle),\n                this.center[1] + (this.radius - this.pinRadius * 2.2) * Math.cos(angle)\n            ];\n\n            const endPinCenter = [\n                this.center[0] + (this.radius - this.pinRadius * 2.2) * Math.sin(reflectedAngle),\n                this.center[1] + (this.radius - this.pinRadius * 2.2) * Math.cos(reflectedAngle)\n            ];\n\n            contexts[0].beginPath();\n            contexts[0].arc(pinCenter[0], pinCenter[1],\n                this.pinRadius, 0, Math.PI * 2);\n            contexts[0].stroke();\n\n            contexts[0].beginPath();\n            contexts[0].moveTo(startPinCenter[0], startPinCenter[1]);\n            contexts[0].lineTo(endPinCenter[0], endPinCenter[1]);\n            contexts[0].stroke();\n\n            contexts[0].beginPath();\n            contexts[0].fillText(this.props.chars[i], pinCenter[0], pinCenter[1]);\n        }\n    }\n\n    drawHighlight(go: number, back: number) {\n        const context = this.canvases[1].getContext(\"2d\")!;\n\n        context.clearRect(0, 0, this.props.width, this.props.height);\n\n        const goAngle = Math.PI - go * 2 * Math.PI / this.props.numberOfChars;\n        const outerGoPinCenter = [\n            this.center[0] + (this.radius - this.pinRadius * 1.2) * Math.sin(goAngle),\n            this.center[1] + (this.radius - this.pinRadius * 1.2) * Math.cos(goAngle)\n        ];\n\n        const backAngle = Math.PI - back * 2 * Math.PI / this.props.numberOfChars;\n        const outerBackPinCenter = [\n            this.center[0] + (this.radius - this.pinRadius * 1.2) * Math.sin(backAngle),\n            this.center[1] + (this.radius - this.pinRadius * 1.2) * Math.cos(backAngle)\n        ];\n\n        context.fillStyle = \"rgba(255, 0, 0, 0.5)\";\n        context.beginPath();\n        context.arc(outerGoPinCenter[0], outerGoPinCenter[1], this.pinRadius, 0, Math.PI * 2);\n        context.fill();\n\n        context.fillStyle = \"rgba(0, 255, 0, 0.5)\";\n        context.beginPath();\n        context.arc(outerBackPinCenter[0], outerBackPinCenter[1], this.pinRadius, 0, Math.PI * 2);\n        context.fill();\n    }\n\n    render() {\n        return (\n            <div className=\"Reflector\">\n                <h3>Reflector</h3>\n                <div style={{\n                    position: \"relative\",\n                    width: this.props.width,\n                    height: this.props.height,\n                    margin: \"20px auto\"\n                }}>\n                    <canvas ref={e => this.canvases[0] = e!}\n                            width={this.props.width}\n                            height={this.props.height}\n                            style={{\n                                position: \"absolute\",\n                                top: 0,\n                                left: 0,\n                                zIndex: 0\n                            }}\n                    />\n                    <canvas ref={e => this.canvases[1] = e!}\n                            width={this.props.width}\n                            height={this.props.height}\n                            style={{\n                                position: \"absolute\",\n                                top: 0,\n                                left: 0,\n                                zIndex: 1\n                            }}\n                    />\n\n                </div>\n            </div>\n        );\n    }\n\n}","type Char = number;\n\nexport class Enigma {\n    rotorPositions: Char[];\n    rotorConfiguration: Char[][];\n    currentPosition = 0;\n    reflectorConfiguration: Char[];\n    numberOfChars: number;\n\n    constructor(rotorPositions: Char[], rotorConfiguration: Char[][], reflectorConfiguration: Char[], numberOfChars: number) {\n        if (reflectorConfiguration.length !== numberOfChars && numberOfChars % 2 !== 0) {\n            throw Error();\n        }\n        this.rotorPositions = rotorPositions;\n        this.rotorConfiguration = rotorConfiguration;\n        this.reflectorConfiguration = reflectorConfiguration;\n        this.numberOfChars = numberOfChars;\n    }\n\n    resetPosition(rotorPositions: Char[] | null) {\n        if (rotorPositions) {\n            if (this.rotorPositions.length !== rotorPositions.length) {\n                throw Error();\n            }\n            this.rotorPositions = rotorPositions;\n        }\n        this.currentPosition = 0;\n    }\n\n    encryptChar(char: Char): Char {\n        const rotateIndex = (idx: number) => (idx + AlphabetEnigma.alphabet.length) % AlphabetEnigma.alphabet.length;\n\n        this.rotorPositions.forEach((pos, idx) => {\n            let rotorPos = pos + Math.floor(this.currentPosition / Math.max(this.numberOfChars * idx, 1));\n            char = rotateIndex(this.rotorConfiguration[idx][rotateIndex(char + rotorPos)] - rotorPos);\n        });\n\n        char = this.reflectorConfiguration[char];\n\n        this.rotorPositions.reverse().forEach((pos, rev_idx) => {\n            let idx = this.rotorPositions.length - rev_idx - 1;\n            let rotorPos = pos + Math.floor(this.currentPosition / Math.max(this.numberOfChars * idx, 1));\n            char = rotateIndex(this.rotorConfiguration[idx].indexOf(rotateIndex(char + rotorPos)) - rotorPos);\n        });\n\n        this.currentPosition++;\n        return char;\n    }\n\n    encryptChars(chars: Char[]): Char[] {\n        return chars.map(c => this.encryptChar(c))\n    }\n}\n\nexport class AlphabetEnigma extends Enigma {\n    static readonly alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n    constructor(rotorPositions: Char[],\n                rotorConfiguration: Char[][] = [AlphabetEnigmaRotorConfiguration1, AlphabetEnigmaRotorConfiguration2, AlphabetEnigmaRotorConfiguration3],\n                reflectorConfiguration: Char[] = AlphabetEnigmaReflectorConfigurationA) {\n        super(rotorPositions, rotorConfiguration, reflectorConfiguration, AlphabetEnigma.alphabet.length)\n    }\n\n    encryptAlphabetString(str: string): string {\n        let str_array = Array.from({length: str.length}, (_, k) => str.charAt(k).toUpperCase());\n        let chars = str_array\n            .filter(s => AlphabetEnigma.alphabet.indexOf(s) >= 0)\n            .map(s => AlphabetEnigma.alphabet.indexOf(s));\n        chars = this.encryptChars(chars);\n        return chars.map(c => AlphabetEnigma.alphabet.charAt(c)).join(\"\");\n    }\n}\n\nexport const AlphabetEnigmaDefaultReflectorConfiguration: Char[][] = Array.from({length: AlphabetEnigma.alphabet.length / 2},\n    (_, k) => k).map(i => [i, AlphabetEnigma.alphabet.length - 1 - i]);\n\nexport const AlphabetEnigmaRotorConfigurationSimple: Char[] = Array.from(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").map(c => AlphabetEnigma.alphabet.indexOf(c));\nexport const AlphabetEnigmaRotorConfiguration1: Char[] = Array.from(\"EKMFLGDQVZNTOWYHXUSPAIBRCJ\").map(c => AlphabetEnigma.alphabet.indexOf(c));\nexport const AlphabetEnigmaRotorConfiguration2: Char[] = Array.from(\"AJDKSIRUXBLHWTMCQGZNPYFVOE\").map(c => AlphabetEnigma.alphabet.indexOf(c));\nexport const AlphabetEnigmaRotorConfiguration3: Char[] = Array.from(\"BDFHJLCPRTXVZNYEIWGAKMUSQO\").map(c => AlphabetEnigma.alphabet.indexOf(c));\nexport const AlphabetEnigmaRotorConfiguration4: Char[] = Array.from(\"ESOVPZJAYQUIRHXLNFTGKDCMWB\").map(c => AlphabetEnigma.alphabet.indexOf(c));\nexport const AlphabetEnigmaRotorConfiguration5: Char[] = Array.from(\"VZBRGITYUPSDNHLXAWMJQOFECK\").map(c => AlphabetEnigma.alphabet.indexOf(c));\n\nexport const AlphabetEnigmaReflectorConfigurationSimple: Char[] = Array.from(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\").map(c => AlphabetEnigma.alphabet.indexOf(c));\nexport const AlphabetEnigmaReflectorConfigurationA: Char[] = Array.from(\"EJMZALYXVBWFCRQUONTSPIKHGD\").map(c => AlphabetEnigma.alphabet.indexOf(c));\nexport const AlphabetEnigmaReflectorConfigurationB: Char[] = Array.from(\"YRUHQSLDPXNGOKMIEBFZCWVJAT\").map(c => AlphabetEnigma.alphabet.indexOf(c));\nexport const AlphabetEnigmaReflectorConfigurationC: Char[] = Array.from(\"FVPJIAOYEDRZXWGCTKUQSBNMHL\").map(c => AlphabetEnigma.alphabet.indexOf(c));","import React from 'react';\nimport Rotor from \"./Rotor\";\nimport Reflector from \"./Reflector\";\n\nimport {\n    AlphabetEnigma,\n    AlphabetEnigmaReflectorConfigurationA,\n    AlphabetEnigmaRotorConfiguration1,\n    AlphabetEnigmaRotorConfiguration2,\n    AlphabetEnigmaRotorConfiguration3,\n} from \"../model/Enigma\";\n\n\nexport default class Rotors extends React.Component {\n    state = {\n        inputChar: null,\n        outputChar: null\n    };\n    size = 400;\n    rotors: Rotor[] = [];\n    inputButtons: HTMLButtonElement[] = [];\n    reflector: Reflector | null = null;\n    chars = Array.from(AlphabetEnigma.alphabet);\n    rotorConfigurations: number[][] = [\n        AlphabetEnigmaRotorConfiguration1,\n        AlphabetEnigmaRotorConfiguration2,\n        AlphabetEnigmaRotorConfiguration3\n    ];\n    reflectorConfiguration: number[] = AlphabetEnigmaReflectorConfigurationA;\n\n    inputButtonSelected(c: string) {\n        const rotateIndex = (idx: number) => (idx + this.chars.length) % this.chars.length;\n        this.setState({inputChar: c});\n\n        const goPos1 = this.chars.indexOf(c);\n        const nextChar1 = rotateIndex(this.rotorConfigurations[0][rotateIndex(goPos1 + this.rotors[0].state.rotorPosition)]);\n        const nextPos1 = rotateIndex(nextChar1 - this.rotors[0].state.rotorPosition + this.chars.length);\n\n        const goPos2 = nextPos1;\n        const nextChar2 = rotateIndex(this.rotorConfigurations[1][goPos2 + this.rotors[1].state.rotorPosition]);\n        const nextPos2 = rotateIndex(nextChar2 - this.rotors[1].state.rotorPosition + this.chars.length);\n\n        const goPos3 = nextPos2;\n        const next3 = rotateIndex(this.rotorConfigurations[2][goPos3 + this.rotors[2].state.rotorPosition]);\n        const nextPos3 = rotateIndex(next3 - this.rotors[2].state.rotorPosition + this.chars.length);\n\n        const beforePos3 = this.reflectorConfiguration[nextPos3];\n        const before3 = rotateIndex(beforePos3 + this.rotors[2].state.rotorPosition);\n        const back3 = rotateIndex(this.rotorConfigurations[2].indexOf(before3) - this.rotors[2].state.rotorPosition);\n\n        const beforePos2 = rotateIndex(back3);\n        const before2 = rotateIndex(beforePos2 + this.rotors[1].state.rotorPosition);\n        const back2 = rotateIndex(this.rotorConfigurations[1].indexOf(before2) - this.rotors[1].state.rotorPosition);\n\n        const beforePos1 = rotateIndex(back2 + this.chars.length);\n        const before1 = rotateIndex(beforePos1 + this.rotors[0].state.rotorPosition);\n        const back1 = rotateIndex(this.rotorConfigurations[0].indexOf(before1) - this.rotors[0].state.rotorPosition);\n\n        this.rotors[0].drawHighlight(goPos1, nextPos1, back1, beforePos1, true);\n        this.rotors[1].drawHighlight(goPos2, nextPos2, back2, beforePos2);\n        this.rotors[2].drawHighlight(goPos3, nextPos3, back3, beforePos3);\n        this.reflector!.drawHighlight(nextPos3, beforePos3);\n\n        this.inputButtons.forEach(e => e.className = e.classList[0]);\n        this.inputButtons[goPos1].classList.add(\"alphabet-input-button-selected\");\n        this.inputButtons[back1].classList.add(\"alphabet-output-button-selected\");\n    }\n\n    onRotorUpdate = () => {\n        if (this.state.inputChar) {\n            this.inputButtonSelected(this.state.inputChar!);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"Rotors\">\n                <h2>Rotors</h2>\n                <div style={{\n                    display: \"flex\",\n                    justifyContent: \"center\"\n                }}>\n                    <Rotor numberOfChars={AlphabetEnigma.alphabet.length}\n                           chars={this.chars}\n                           width={this.size}\n                           height={this.size}\n                           rotorConfiguration={this.rotorConfigurations[0].map(c => this.chars[c])}\n                           onRotorUpdate={this.onRotorUpdate}\n                           name={\"R1\"}\n                           ref={e => this.rotors[0] = e!}\n                    />\n                    <Rotor numberOfChars={AlphabetEnigma.alphabet.length}\n                           chars={this.chars}\n                           width={this.size}\n                           height={this.size}\n                           rotorConfiguration={this.rotorConfigurations[1].map(c => this.chars[c])}\n                           onRotorUpdate={this.onRotorUpdate}\n                           name={\"R2\"}\n                           ref={e => this.rotors[1] = e!}\n                    />\n                    <Rotor numberOfChars={AlphabetEnigma.alphabet.length}\n                           chars={this.chars}\n                           width={this.size}\n                           height={this.size}\n                           rotorConfiguration={this.rotorConfigurations[2].map(c => this.chars[c])}\n                           onRotorUpdate={this.onRotorUpdate}\n                           name={\"R3\"}\n                           ref={e => this.rotors[2] = e!}\n                    />\n                    <Reflector numberOfChars={AlphabetEnigma.alphabet.length}\n                               chars={this.chars}\n                               reflectorConfiguration={this.reflectorConfiguration.map(c => this.chars[c])}\n                               width={this.size * 0.8}\n                               height={this.size * 0.8}\n                               ref={e => this.reflector = e}\n                    />\n                </div>\n                <div className={\"alphabet-input-button-wrapper\"}>\n                    {this.chars.map((c, idx) =>\n                        <button className={\"alphabet-input-button\"}\n                                key={\"alphabet-input-button-\" + c}\n                                onClick={() => this.inputButtonSelected(c)}\n                                ref={e => this.inputButtons[idx] = e!}\n                        >{c}</button>)}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport {AlphabetEnigma} from \"../model/Enigma\";\n\nclass Encoder extends React.Component {\n    state = {\n        plain: \"\",\n        encoded: \"\",\n        encoderConfiguration: [\"A\", \"A\", \"A\"],\n    };\n\n    enigma = new AlphabetEnigma([0, 0, 0]);\n    chars = Array.from(AlphabetEnigma.alphabet);\n\n    encode(str: string) {\n        str = Array.from({length: str.length},\n            (_, k) => str.charAt(k).toUpperCase()).filter(s => this.chars.indexOf(s) >= 0).join(\"\");\n        this.setState({plain: str});\n        this.enigma.resetPosition(this.state.encoderConfiguration.map(c => this.chars.indexOf(c)));\n        const encodedStr = this.enigma.encryptAlphabetString(str);\n        this.setState({encoded: encodedStr})\n    }\n\n    updateEncoderConfiguration(idx: number, char: string) {\n        let conf = this.state.encoderConfiguration;\n        if (char.length >= 2) {\n            char = char.charAt(1)\n        }\n        char = char.toUpperCase();\n        if (this.chars.indexOf(char) >= 0) {\n            conf[idx] = char;\n        }\n        this.setState({encoderConfiguration: conf});\n        this.encode(this.state.plain);\n    }\n\n    render() {\n        return (\n            <div className=\"Encoder\">\n                <h2>Encoder</h2>\n                <div>\n                    <div className={\"encoder-configurations\"}>\n                        <div>\n                            <label htmlFor={\"R1-Configuration\"}>R1:</label>\n                            <input id={\"R1-Configuration\"} value={this.state.encoderConfiguration[0]}\n                                   onChange={e => this.updateEncoderConfiguration(0, e.target.value)}/>\n                            <label htmlFor={\"R2-Configuration\"}>R2:</label>\n                            <input id={\"R2-Configuration\"} value={this.state.encoderConfiguration[1]}\n                                   onChange={e => this.updateEncoderConfiguration(1, e.target.value)}/>\n                            <label htmlFor={\"R3-Configuration\"}>R3:</label>\n                            <input id={\"R3-Configuration\"} value={this.state.encoderConfiguration[2]}\n                                   onChange={e => this.updateEncoderConfiguration(2, e.target.value)}/>\n                        </div>\n\n                    </div>\n                    <div>\n                        <div className={\"encoder-input\"}>\n                            <label htmlFor={\"PlainInput\"}>Plain Text:</label>\n                            <input id={\"PlainInput\"} value={this.state.plain}\n                                   onChange={e => this.encode(e.target.value)}/>\n                        </div>\n                        <div className={\"encoder-output\"}>\n                            Output: <span className={\"encoder-output-text\"}>{this.state.encoded}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Encoder;\n","import React from 'react';\nimport './App.css';\nimport Rotors from \"./component/Rotors\"\nimport Encoder from \"./component/Encoder\"\n\nconst App: React.FC = () => (\n    <div className=\"App\">\n        <h1>Enigma</h1>\n        <Encoder/>\n        <hr/>\n        <Rotors/>\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}